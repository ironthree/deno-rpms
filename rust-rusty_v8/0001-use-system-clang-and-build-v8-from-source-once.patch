diff --git a/build.rs b/build.rs
index 0f53e65..fc6d3fc 100644
--- a/build.rs
+++ b/build.rs
@@ -1,5 +1,4 @@
 // Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.
-use fslock::LockFile;
 use std::collections::HashSet;
 use std::env;
 use std::fs;
@@ -44,11 +43,7 @@ fn main() {
         .unwrap()
         .join("lib_download.fslock");
       println!("download lockfile: {:?}", &lockfilepath);
-      let mut lockfile = LockFile::open(&lockfilepath)
-        .expect("Couldn't open lib download lockfile.");
-      lockfile.lock().expect("Couldn't get lock");
       download_static_lib_binaries();
-      lockfile.unlock().expect("Couldn't unlock lockfile");
     }
   }
 
@@ -197,19 +192,20 @@ fn download_ninja_gn_binaries() {
 }
 
 fn static_lib_url() -> String {
-  let default_base = "https://github.com/denoland/rusty_v8/releases/download";
-  let base =
-    env::var("RUSTY_V8_MIRROR").unwrap_or_else(|_| default_base.into());
+  let libdir = match env::var("TARGET").unwrap().as_str() {
+    "aarch64-unknown-linux-gnu" => "/usr/lib64",
+    "armv7-unknown-linux-gnueabihf" => "/usr/lib",
+    "i686-unknown-linux-gnu" => "/usr/lib",
+    "powerpc64le-unknown-linux-gnu" => "/usr/lib64",
+    "s390x-unknown-linux-gnu" => "/usr/lib64",
+    "x86_64-unknown-linux-gnu" => "/usr/lib64",
+    x => panic!("Unkown target triple: {}", x),
+  };
+
+  let base = format!("{}/rusty_v8", libdir);
   let version = env::var("CARGO_PKG_VERSION").unwrap();
-  let target = env::var("TARGET").unwrap();
-  if cfg!(target_os = "windows") {
-    // Note: we always use the release build on windows.
-    format!("{}/v{}/rusty_v8_release_{}.lib", base, version, target)
-  } else {
-    let profile = env::var("PROFILE").unwrap();
-    assert!(profile == "release" || profile == "debug");
-    format!("{}/v{}/librusty_v8_{}_{}.a", base, version, profile, target)
-  }
+
+  format!("{}/v{}/librusty_v8.a", base, version)
 }
 
 fn static_lib_name() -> &'static str {
@@ -337,12 +333,10 @@ fn is_compatible_clang_version(clang_path: &Path) -> bool {
 }
 
 fn find_compatible_system_clang() -> Option<PathBuf> {
-  if let Ok(p) = env::var("CLANG_BASE_PATH") {
-    let base_path = Path::new(&p);
-    let clang_path = base_path.join("bin").join("clang");
-    if is_compatible_clang_version(&clang_path) {
-      return Some(base_path.to_path_buf());
-    }
+  let base_path = Path::new("/usr");
+  let clang_path = base_path.join("bin").join("clang");
+  if is_compatible_clang_version(&clang_path) {
+    return Some(base_path.to_path_buf());
   }
 
   println!("using Chromiums clang");
