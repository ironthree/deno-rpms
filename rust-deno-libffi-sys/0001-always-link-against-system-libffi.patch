From c6fd0baed0943439ff36c0d1b211695c1f6d6ecd Mon Sep 17 00:00:00 2001
From: Fabio Valentini <decathorpe@gmail.com>
Date: Mon, 6 Sep 2021 21:37:38 +0200
Subject: [PATCH] always link against system libffi

---
 build/build.rs    | 17 +---------
 build/common.rs   |  9 -----
 build/msvc.rs     | 74 ------------------------------------------
 build/not_msvc.rs | 83 -----------------------------------------------
 4 files changed, 1 insertion(+), 182 deletions(-)
 delete mode 100644 build/common.rs
 delete mode 100644 build/msvc.rs
 delete mode 100644 build/not_msvc.rs

diff --git a/build/build.rs b/build/build.rs
index 023cca4..55b0f1f 100644
--- a/build/build.rs
+++ b/build/build.rs
@@ -1,18 +1,3 @@
-mod common;
-#[cfg(target_env = "msvc")]
-mod msvc;
-#[cfg(not(target_env = "msvc"))]
-mod not_msvc;
-
-#[cfg(target_env = "msvc")]
-use msvc::*;
-#[cfg(not(target_env = "msvc"))]
-use not_msvc::*;
-
 fn main() {
-    if cfg!(feature = "system") {
-        probe_and_link();
-    } else {
-        build_and_link();
-    }
+    println!("cargo:rustc-link-lib=dylib=ffi");
 }
diff --git a/build/common.rs b/build/common.rs
deleted file mode 100644
index bc4b145..0000000
--- a/build/common.rs
+++ /dev/null
@@ -1,9 +0,0 @@
-pub use std::{
-    env, fs,
-    path::{Path, PathBuf},
-    process::Command,
-};
-
-pub fn run_command(which: &'static str, cmd: &mut Command) {
-    assert!(cmd.status().expect(which).success(), "{}", which);
-}
diff --git a/build/msvc.rs b/build/msvc.rs
deleted file mode 100644
index c116d02..0000000
--- a/build/msvc.rs
+++ /dev/null
@@ -1,74 +0,0 @@
-use crate::common::*;
-
-const INCLUDE_DIRS: &[&str] = &["libffi", "libffi/include", "include/msvc", "libffi/src/x86"];
-
-const BUILD_FILES: &[&str] = &[
-    "closures.c",
-    "prep_cif.c",
-    "raw_api.c",
-    "tramp.c",
-    "types.c",
-    "x86/ffi.c",
-];
-
-const BUILD_FILES_X64: &[&str] = &["x86/ffiw64.c"];
-
-fn add_file(build: &mut cc::Build, file: &str) {
-    build.file(format!("libffi/src/{}", file));
-}
-
-pub fn build_and_link() {
-    let target = env::var("TARGET").unwrap();
-    let is_x64 = target.contains("x86_64");
-    let asm_path = pre_process_asm(INCLUDE_DIRS, &target, is_x64);
-    let mut build = cc::Build::new();
-
-    for inc in INCLUDE_DIRS {
-        build.include(inc);
-    }
-
-    for file in BUILD_FILES {
-        add_file(&mut build, file);
-    }
-
-    if is_x64 {
-        for file in BUILD_FILES_X64 {
-            add_file(&mut build, file);
-        }
-    }
-
-    build
-        .file(asm_path)
-        .define("WIN32", None)
-        .define("_LIB", None)
-        .define("FFI_BUILDING", None)
-        .warnings(false)
-        .compile("libffi");
-}
-
-pub fn probe_and_link() {
-    // At the time of writing it wasn't clear if MSVC builds will support
-    // dynamic linking of libffi; assuming it's even installed. To ensure
-    // existing MSVC setups continue to work, we just compile libffi from source
-    // and statically link it.
-    build_and_link();
-}
-
-pub fn pre_process_asm(include_dirs: &[&str], target: &str, is_x64: bool) -> String {
-    let file_name = if is_x64 { "win64_intel" } else { "sysv_intel" };
-
-    let mut cmd = cc::windows_registry::find(&target, "cl.exe").expect("Could not locate cl.exe");
-    cmd.env("INCLUDE", include_dirs.join(";"));
-
-    cmd.arg("/EP");
-    cmd.arg(format!("libffi/src/x86/{}.S", file_name));
-
-    let out_path = format!("libffi/src/x86/{}.asm", file_name);
-    let asm_file = fs::File::create(&out_path).expect("Could not create output file");
-
-    cmd.stdout(asm_file);
-
-    run_command("Pre-process ASM", &mut cmd);
-
-    out_path
-}
diff --git a/build/not_msvc.rs b/build/not_msvc.rs
deleted file mode 100644
index f1a06a2..0000000
--- a/build/not_msvc.rs
+++ /dev/null
@@ -1,83 +0,0 @@
-use crate::common::*;
-
-pub fn build_and_link() {
-    let out_dir = env::var("OUT_DIR").unwrap();
-    let build_dir = Path::new(&out_dir).join("libffi-build");
-    let prefix = Path::new(&out_dir).join("libffi-root");
-    let libdir = Path::new(&prefix).join("lib");
-    let libdir64 = Path::new(&prefix).join("lib64");
-
-    // Copy LIBFFI_DIR into build_dir to avoid an unnecessary build
-    if let Err(e) = fs::remove_dir_all(&build_dir) {
-        assert_eq!(
-            e.kind(),
-            std::io::ErrorKind::NotFound,
-            "can't remove the build directory: {}",
-            e
-        );
-    }
-    run_command(
-        "Copying libffi into the build directory",
-        Command::new("cp").arg("-R").arg("libffi").arg(&build_dir),
-    );
-
-    // Generate configure, run configure, make, make install
-    configure_libffi(prefix, &build_dir);
-
-    run_command(
-        "Building libffi",
-        make_cmd::make()
-            .env_remove("DESTDIR")
-            .arg("install")
-            .current_dir(&build_dir),
-    );
-
-    // Cargo linking directives
-    println!("cargo:rustc-link-lib=static=ffi");
-    println!("cargo:rustc-link-search={}", libdir.display());
-    println!("cargo:rustc-link-search={}", libdir64.display());
-}
-
-pub fn probe_and_link() {
-    println!("cargo:rustc-link-lib=dylib=ffi");
-}
-
-pub fn configure_libffi(prefix: PathBuf, build_dir: &Path) {
-    let mut command = Command::new("sh");
-
-    command
-        .arg("configure")
-        .arg("--with-pic")
-        .arg("--disable-docs");
-
-    let target = std::env::var("TARGET").unwrap();
-    if target != std::env::var("HOST").unwrap() {
-        command.arg(format!("--host={}", target.to_string()));
-    }
-
-    command.current_dir(&build_dir);
-
-    if cfg!(windows) {
-        // When using MSYS2, OUT_DIR will be a Windows like path such as
-        // C:\foo\bar. Unfortunately, the various scripts used for building
-        // libffi do not like such a path, so we have to turn this into a Unix
-        // like path such as /c/foo/bar.
-        //
-        // This code assumes the path only uses : for the drive letter, and only
-        // uses \ as a component separator. It will likely break for file paths
-        // that include a :.
-        let mut msys_prefix = prefix
-            .to_str()
-            .unwrap()
-            .replace(":\\", "/")
-            .replace("\\", "/");
-
-        msys_prefix.insert(0, '/');
-
-        command.arg("--prefix").arg(msys_prefix);
-    } else {
-        command.arg("--prefix").arg(prefix);
-    }
-
-    run_command("Configuring libffi", &mut command);
-}
-- 
2.31.1

